{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 28, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Maria%20Reda/xorithm-server-status/pages/dashboard.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useRouter } from \"next/router\";\r\nimport { Card, CardContent, Typography, Button, Grid } from \"@mui/material\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\n\r\nexport default function Dashboard() {\r\n  const router = useRouter();\r\n  const [servers, setServers] = useState([]);\r\n  const [uptimeData, setUptimeData] = useState([]);\r\n\r\n  const randomStatus = () => {\r\n    const statuses = [\"Online\", \"Offline\", \"Maintenance\"];\r\n    return statuses[Math.floor(Math.random() * statuses.length)];\r\n  };\r\n\r\n  const fetchServerStatus = () => {\r\n    const mockData = [\r\n      { id: 1, name: \"Auth Server\", status: randomStatus() },\r\n      { id: 2, name: \"Database Server\", status: randomStatus() },\r\n      { id: 3, name: \"Frontend Server\", status: randomStatus() },\r\n      { id: 4, name: \"API Gateway\", status: randomStatus() },\r\n    ];\r\n    setServers(mockData);\r\n\r\n    // mock uptime stats for charts\r\n    const mockUptime = Array.from({ length: 10 }, (_, i) => ({\r\n      time: `T${i + 1}`,\r\n      uptime: Math.floor(90 + Math.random() * 10), // 90â€“100%\r\n    }));\r\n    setUptimeData(mockUptime);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const isLoggedIn = localStorage.getItem(\"loggedIn\");\r\n    if (!isLoggedIn) router.push(\"/login\");\r\n\r\n    fetchServerStatus();\r\n    const interval = setInterval(fetchServerStatus, 5000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem(\"loggedIn\");\r\n    router.push(\"/login\");\r\n  };\r\n\r\n  const getStatusColor = (status) => {\r\n    switch (status) {\r\n      case \"Online\":\r\n        return \"bg-green-100 text-green-700 border-green-400\";\r\n      case \"Offline\":\r\n        return \"bg-red-100 text-red-700 border-red-400\";\r\n      case \"Maintenance\":\r\n        return \"bg-yellow-100 text-yellow-700 border-yellow-400\";\r\n      default:\r\n        return \"bg-gray-100 text-gray-700 border-gray-400\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen p-10 bg-gray-50\">\r\n      <div className=\"flex justify-between items-center mb-10\">\r\n        <h1 className=\"text-3xl font-bold text-gray-800\">ðŸš€ Server Status Dashboard</h1>\r\n        <Button variant=\"contained\" color=\"error\" onClick={handleLogout}>\r\n          Logout\r\n        </Button>\r\n      </div>\r\n\r\n      {/* Server Cards */}\r\n      <Grid container spacing={3}>\r\n        {servers.map((server) => (\r\n          <Grid item xs={12} sm={6} md={3} key={server.id}>\r\n            <Card className={`border-l-8 ${getStatusColor(server.status)} shadow-md`}>\r\n              <CardContent>\r\n                <Typography variant=\"h6\" className=\"font-semibold\">\r\n                  {server.name}\r\n                </Typography>\r\n                <Typography variant=\"body1\" className=\"mt-2 font-medium\">\r\n                  Status: {server.status}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n\r\n      {/* Analytics Section */}\r\n      <div className=\"mt-12\">\r\n        <h2 className=\"text-2xl font-semibold text-gray-800 mb-6\">\r\n          ðŸ“Š Uptime Analytics\r\n        </h2>\r\n        <Card className=\"shadow-lg p-4\">\r\n          <CardContent>\r\n            <ResponsiveContainer width=\"100%\" height={300}>\r\n              <LineChart data={uptimeData}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"time\" />\r\n                <YAxis domain={[80, 100]} />\r\n                <Tooltip />\r\n                <Line type=\"monotone\" dataKey=\"uptime\" stroke=\"#3b82f6\" strokeWidth={3} />\r\n              </LineChart>\r\n            </ResponsiveContainer>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}